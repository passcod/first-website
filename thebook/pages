a:4:{s:5:"diary";s:2197:"<html>
	<head>
		<title>The Book I Dreamt Of</title>
		<style type="text/css">
			/* Diavlo, A font by Jos Buivenga (exljbris) -> www.exljbris.com */
			@font-face {
				font-family: "Diavlo Bold";
				src: local("Diavlo Bold"),
				url(Diavlo_BOLD_II_37.otf);
				font-weight: bold;
			}
			@font-face {
				font-family: "Diavlo";
				src: local("Diavlo Book"),
				url(Diavlo_BOOK_II_37.otf);
			}
			
			* {
				font-family: "Diavlo", sans-serif;
				color: black;
			}
			b, strong, h1 {
				font-family: "Diavlo Bold", sans-serif;
				font-weight: bold;
			}
			
			a, a:visited {
				text-decoration: underline;
			}
			a:hover {
				text-decoration: none;
			}
		</style>
	</head>
	<body>
		<h1>Writing Diary</h1>

<h2>10.16.7</h2>

<p>I've written the prologue earlier in the afternoon. It's basically a diary
entry, 4 years into the future. The irony is it doesn't say anything except
that something <em>will</em> happen in 49&#46; In fact, it precises the date of the
first day (the first chapter) to be 49.47.9&#46;</p>

<p>I've thought about the title (if I'm not keeping "The Book I Dreamt Of", of
course). Nothing geniously great has popped up, but there is that one: "A 
Tahlr Tale". The first two words are a pun, except you won't look for it in
the right language: the words are English, but the pun is French. It's not a
pun to properly speak, English teachers will call it a <em>Mondegreen</em>. Those
first two words can be made into "&Agrave; t'&agrave; l'heure", which is short
for "&Agrave; tout &agrave; l'heure", which is french for "See you later". Not
great, but still.</p>

<p>For this to work, I have to precise the pronounciation of Tahlr. It's TAH-LER.
The <em>a</em> as in sp<em>a</em>, and the <em>er</em> as in pott<em>er</em>, mann<em>er</em>s, read<em>er</em>. I hope
you understand.</p>

<p>The (real) title will be determined much later, of course...</p>

<p>One last thing: I need to think about the names of the four main characters --
2b + 2g, and the last one we'll see when he/she appears.</p>

<p><br /></p>

<p>P.S: Oh, and remind me to look up old and made up languages to create the
origins of the word (and the country) Tahlr.</p>

	</body>
</html>
";s:4:"book";s:913:"<html>
	<head>
		<title>The Book I Dreamt Of</title>
		<style type="text/css">
			/* Diavlo, A font by Jos Buivenga (exljbris) -> www.exljbris.com */
			@font-face {
				font-family: "Diavlo Bold";
				src: local("Diavlo Bold"),
				url(Diavlo_BOLD_II_37.otf);
				font-weight: bold;
			}
			@font-face {
				font-family: "Diavlo";
				src: local("Diavlo Book"),
				url(Diavlo_BOOK_II_37.otf);
			}
			
			* {
				font-family: "Diavlo", sans-serif;
				color: black;
			}
			b, strong, h1 {
				font-family: "Diavlo Bold", sans-serif;
				font-weight: bold;
			}
			
			a, a:visited {
				text-decoration: underline;
			}
			a:hover {
				text-decoration: none;
			}
		</style>
	</head>
	<body>
		<h1>The Book I Dreamt Of</h1>

<h2>Language</h2>

<p>It will be written in English at the base, but I may write a French translation as I go.</p>

<h2>License</h2>

<p>CC-BY-NC-SA 3.0 Unported</p>

	</body>
</html>
";s:8:"prologue";s:2143:"<html>
	<head>
		<title>The Book I Dreamt Of</title>
		<style type="text/css">
			/* Diavlo, A font by Jos Buivenga (exljbris) -> www.exljbris.com */
			@font-face {
				font-family: "Diavlo Bold";
				src: local("Diavlo Bold"),
				url(Diavlo_BOLD_II_37.otf);
				font-weight: bold;
			}
			@font-face {
				font-family: "Diavlo";
				src: local("Diavlo Book"),
				url(Diavlo_BOOK_II_37.otf);
			}
			
			* {
				font-family: "Diavlo", sans-serif;
				color: black;
			}
			b, strong, h1 {
				font-family: "Diavlo Bold", sans-serif;
				font-weight: bold;
			}
			
			a, a:visited {
				text-decoration: underline;
			}
			a:hover {
				text-decoration: none;
			}
		</style>
	</head>
	<body>
		<h1>Prologue</h1>

<p><em><strong>53.47.2</strong> Day of Salt</em></p>

<p>Today, nearly 4 years since it began, is the first time I have enjoyed the
Day of Salt in the Red City of Ominelga. It is a time of reunion, of sadness
and joy, of remembering before the celebrating, of salt tasting and salt
burning. It is a day when the children will run and laugh, the grown-ups smile
and joke. It is a happy day.</p>

<p>Four years ago, we were sailing up the River, in the middle of the night, late.
We were silent and anxious, and excited and restless. We had missed the tide
and now had to break the water fast, as fast as we could, to arrive at the quay
before the earliest bird sang.</p>

<p>Four years ago, we were in the Blue City of Abelfa, resting after that lone
racing, waiting impatiently the morning, the sun, the song of the earliest bird.</p>

<p>Four years ago, we were running and crying and shouting and laughing and joking
and pushing and pulling and sitting and standing and showing and watching and
listening and talking and eating and drinking and having a good Day of Salt.</p>

<p>It was before.</p>

<p>I will not describe the Day of Salt. It is not right. Such happiness should not
be tainted by the times later.</p>

<p>We had a good time, oblivious as we were. But it began then; it was the beginning
of the beginning, and I shall begin. What happened happened...</p>

<p><em>... the next day.</em></p>

	</body>
</html>
";s:8:"chapter1";s:765:"<html>
	<head>
		<title>The Book I Dreamt Of</title>
		<style type="text/css">
			/* Diavlo, A font by Jos Buivenga (exljbris) -> www.exljbris.com */
			@font-face {
				font-family: "Diavlo Bold";
				src: local("Diavlo Bold"),
				url(Diavlo_BOLD_II_37.otf);
				font-weight: bold;
			}
			@font-face {
				font-family: "Diavlo";
				src: local("Diavlo Book"),
				url(Diavlo_BOOK_II_37.otf);
			}
			
			* {
				font-family: "Diavlo", sans-serif;
				color: black;
			}
			b, strong, h1 {
				font-family: "Diavlo Bold", sans-serif;
				font-weight: bold;
			}
			
			a, a:visited {
				text-decoration: underline;
			}
			a:hover {
				text-decoration: none;
			}
		</style>
	</head>
	<body>
		<h1>Chapter 1</h1>

<h2>49.47.3</h2>

<p>--></p>

	</body>
</html>
";}